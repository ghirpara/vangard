/*
 *   BatchRenderSU.dsa
 *
 *
 * 
 *
 *   Author: G.Hirpara
 *   Version: 1.0.0
 *   Copyright (c) 2025 G.Hirpara
 * 
 *   LICENSING FOR THIS CODE IS DOCUMENTED IN THE ACCOMPANYING LICENSE.md FILE. 
 *   USERS OF THIS CODE AGREE TO TERMS AND CONDITIONS OUTLINED IN THE LICENSE.
 * 
 */

includeDir_oFILE = DzFile( getScriptFileName() );
util_path = includeDir_oFILE.path() + "/DazCopilotUtils.dsa";
include (util_path);

var focus_script = null;

function BatchRenderSU() {

    sFunctionName = 'BatchRenderSU';

    oScriptVars = init_script_utils (sFunctionName);

    
    // Identify the type of batch render we're interested in 
    scene_file_list    = oScriptVars['scene_files'];
    render_target      = oScriptVars['target'];
    output_base_path   = oScriptVars['output-path'];
    iray_config        = {}

    if (render_target == 'iray-server-bridge') {
        if (oScriptVars['iray_config_file'] != undefined) {
            iray_config = readFromFileAsJson(oScriptVars['iray_config_file']);
        }
    }

    aIrayVariables = ["iray_server', 'iray_protocol", "iray_port", "iray_user", "iray_password"]
    for (var x = 0; x < aIrayVariables.length; x++) {
        test = oScriptVars[aIrayVariables[x]];
        if (test != null) {
            iray_config[aIrayVariables[x]] = test;
        }
    }

    render_config = oScriptVars;
    render_config['iray_config'] = iray_config

    log_info (
    	"BatchRenderSU",
	{
	    'scene_file_list': scene_file_list
	}
    )

    if (scene_file_list == undefined) {
	    execBatchRenderScene(null, render_config, render_target, output_base_path);
    } else {
        for (var y = 0; y < scene_file_list.length; y++) {
            scene_file = scene_file_list[y];
            execBatchRenderScene(scene_file, render_config, render_target, output_base_path);
        }
    }
    close_script_utils();

}

BatchRenderSU();
